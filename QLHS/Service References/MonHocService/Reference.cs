//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QLHS.MonHocService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonHocBDO", Namespace="http://schemas.datacontract.org/2004/07/QuanLySinhVienWCF.QuanLySinhVienBDO")]
    [System.SerializableAttribute()]
    public partial class MonHocBDO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaMHField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SoTietField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TenMHField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaMH {
            get {
                return this.MaMHField;
            }
            set {
                if ((object.ReferenceEquals(this.MaMHField, value) != true)) {
                    this.MaMHField = value;
                    this.RaisePropertyChanged("MaMH");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SoTiet {
            get {
                return this.SoTietField;
            }
            set {
                if ((this.SoTietField.Equals(value) != true)) {
                    this.SoTietField = value;
                    this.RaisePropertyChanged("SoTiet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TenMH {
            get {
                return this.TenMHField;
            }
            set {
                if ((object.ReferenceEquals(this.TenMHField, value) != true)) {
                    this.TenMHField = value;
                    this.RaisePropertyChanged("TenMH");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MonHocService.IMonHocService")]
    public interface IMonHocService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/Add", ReplyAction="http://tempuri.org/IMonHocService/AddResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Exception), Action="http://tempuri.org/IMonHocService/AddExceptionFault", Name="Exception", Namespace="http://schemas.datacontract.org/2004/07/System")]
        bool Add(QLHS.MonHocService.MonHocBDO monhoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/Add", ReplyAction="http://tempuri.org/IMonHocService/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(QLHS.MonHocService.MonHocBDO monhoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/Update", ReplyAction="http://tempuri.org/IMonHocService/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Exception), Action="http://tempuri.org/IMonHocService/UpdateExceptionFault", Name="Exception", Namespace="http://schemas.datacontract.org/2004/07/System")]
        bool Update(QLHS.MonHocService.MonHocBDO monhoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/Update", ReplyAction="http://tempuri.org/IMonHocService/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(QLHS.MonHocService.MonHocBDO monhoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/Delete", ReplyAction="http://tempuri.org/IMonHocService/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Exception), Action="http://tempuri.org/IMonHocService/DeleteExceptionFault", Name="Exception", Namespace="http://schemas.datacontract.org/2004/07/System")]
        bool Delete(string mamh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/Delete", ReplyAction="http://tempuri.org/IMonHocService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(string mamh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/GetMonHoc", ReplyAction="http://tempuri.org/IMonHocService/GetMonHocResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Exception), Action="http://tempuri.org/IMonHocService/GetMonHocExceptionFault", Name="Exception", Namespace="http://schemas.datacontract.org/2004/07/System")]
        QLHS.MonHocService.MonHocBDO GetMonHoc(string mamh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/GetMonHoc", ReplyAction="http://tempuri.org/IMonHocService/GetMonHocResponse")]
        System.Threading.Tasks.Task<QLHS.MonHocService.MonHocBDO> GetMonHocAsync(string mamh);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/GetAllMonHoc", ReplyAction="http://tempuri.org/IMonHocService/GetAllMonHocResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.Exception), Action="http://tempuri.org/IMonHocService/GetAllMonHocExceptionFault", Name="Exception", Namespace="http://schemas.datacontract.org/2004/07/System")]
        QLHS.MonHocService.MonHocBDO[] GetAllMonHoc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonHocService/GetAllMonHoc", ReplyAction="http://tempuri.org/IMonHocService/GetAllMonHocResponse")]
        System.Threading.Tasks.Task<QLHS.MonHocService.MonHocBDO[]> GetAllMonHocAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonHocServiceChannel : QLHS.MonHocService.IMonHocService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonHocServiceClient : System.ServiceModel.ClientBase<QLHS.MonHocService.IMonHocService>, QLHS.MonHocService.IMonHocService {
        
        public MonHocServiceClient() {
        }
        
        public MonHocServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MonHocServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonHocServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonHocServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Add(QLHS.MonHocService.MonHocBDO monhoc) {
            return base.Channel.Add(monhoc);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(QLHS.MonHocService.MonHocBDO monhoc) {
            return base.Channel.AddAsync(monhoc);
        }
        
        public bool Update(QLHS.MonHocService.MonHocBDO monhoc) {
            return base.Channel.Update(monhoc);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(QLHS.MonHocService.MonHocBDO monhoc) {
            return base.Channel.UpdateAsync(monhoc);
        }
        
        public bool Delete(string mamh) {
            return base.Channel.Delete(mamh);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(string mamh) {
            return base.Channel.DeleteAsync(mamh);
        }
        
        public QLHS.MonHocService.MonHocBDO GetMonHoc(string mamh) {
            return base.Channel.GetMonHoc(mamh);
        }
        
        public System.Threading.Tasks.Task<QLHS.MonHocService.MonHocBDO> GetMonHocAsync(string mamh) {
            return base.Channel.GetMonHocAsync(mamh);
        }
        
        public QLHS.MonHocService.MonHocBDO[] GetAllMonHoc() {
            return base.Channel.GetAllMonHoc();
        }
        
        public System.Threading.Tasks.Task<QLHS.MonHocService.MonHocBDO[]> GetAllMonHocAsync() {
            return base.Channel.GetAllMonHocAsync();
        }
    }
}
